/*
 * Created on $today.date ( Time $today.time )
 * Generated by $generator.name ( version $generator.version )
 */
## ----------------------------------------------------------------------
#if ( $entity.hasCompositePrimaryKey() )
#set( $primaryKeyType = "${entity.name}EntityKey" )
#else 
#set( $primaryKeyType = $entity.keyAttributes[0].wrapperType )
#end
## ----------------------------------------------------------------------

package ${target.javaPackageFromFolder($SRC)};

#foreach( $import in $java.imports($entity.keyAttributes) )
import $import;
#end

import javax.persistence.EntityManager;
import javax.persistence.PersistenceException;
import javax.persistence.Query;

import ${ENTITY_PKG}.jpa.${entity.name}Entity;
#if ( $entity.hasCompositePrimaryKey() )
import ${ENTITY_PKG}.jpa.${entity.name}EntityKey;
#end
import ${ROOT_PKG}.persistence.commons.jpa.GenericJpaService;
import ${ROOT_PKG}.persistence.commons.jpa.JpaOperation;
import ${ROOT_PKG}.persistence.services.${entity.name}Persistence;

/**
 * JPA implementation for basic persistence operations ( entity "${entity.name}" )
 * 
 * @author Telosys Tools Generator
 *
 */
public class ${entity.name}PersistenceJPA extends GenericJpaService<${entity.name}Entity, $primaryKeyType> implements ${entity.name}Persistence {

	/**
	 * Constructor
	 */
	public ${entity.name}PersistenceJPA() {
		super(${entity.name}Entity.class);
	}

	@Override
	public ${entity.name}Entity load( $fn.argumentsListWithType( $entity.keyAttributes ) ) {
#if ( $entity.hasCompositePrimaryKey() )
		// Build the composite key
		$primaryKeyType key = new $primaryKeyType( $fn.argumentsList( $entity.keyAttributes ) );
		return super.load( key );
#else
		return super.load( $fn.argumentsList( $entity.keyAttributes ) );
#end	
	}

	@Override
	public boolean delete( $fn.argumentsListWithType( $entity.keyAttributes ) ) {
#if ( $entity.hasCompositePrimaryKey() )
		// Build the composite key
		$primaryKeyType key = new $primaryKeyType( $fn.argumentsList( $entity.keyAttributes ) );
		return super.delete( key );
#else
		return super.delete( $fn.argumentsList( $entity.keyAttributes ) );
#end	
	}

	@Override
	public boolean delete(${entity.name}Entity entity) {
		if ( entity != null ) {
#if ( $entity.hasCompositePrimaryKey() )
			// Build the composite key
			$primaryKeyType key = new $primaryKeyType( $fn.argumentsListWithGetter( "entity", $entity.keyAttributes ) );
			return super.delete( key );
#else
			return super.delete( $fn.argumentsListWithGetter( "entity", $entity.keyAttributes ) );
#end	
		}
		return false ;
	}

	@Override
	public long countAll() {
		// JPA operation definition 
		JpaOperation operation = new JpaOperation() {
			@Override
			public Object exectue(EntityManager em) throws PersistenceException {
				Query query = em.createNamedQuery("${entity.name}Entity.countAll");
				return query.getSingleResult() ;
			}
		} ;
		// JPA operation execution 
		return (Long) execute(operation);
	}

}
