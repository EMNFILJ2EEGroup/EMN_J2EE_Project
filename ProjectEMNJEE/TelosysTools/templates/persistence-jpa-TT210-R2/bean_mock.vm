## MAP : key = Java Type, value = MockValues method name 
#set ( $map = { 
  "byte"   : "nextByte()",     "java.lang.Byte"    : "nextByte()",  
  "short"  : "nextShort()",    "java.lang.Short"   : "nextShort()", 
  "int"    : "nextInteger()",  "java.lang.Integer" : "nextInteger()", 
  "long"   : "nextLong()",     "java.lang.Long"    : "nextLong()", 
  "float"  : "nextFloat()",    "java.lang.Float"   : "nextFloat()", 
  "double" : "nextDouble()",   "java.lang.Double"  : "nextDouble()", 
  "java.math.BigDecimal" : "nextBigDecimal()", 
  "java.util.Date"       : "nextDate()", 
  "java.sql.Date"        : "nextSqlDate()", 
  "java.sql.Time"        : "nextSqlTime()", 
  "java.sql.Timestamp"   : "nextSqlTimestamp()"
} )
#set( $package = ${target.javaPackageFromFolder($SRC)} )
## ------------------------------------------------------------------
#macro( mockMethod $field )
#if ( $field.type == "String" )
#set ( $methodName = "nextString($field.databaseSize)" )
#else
#set ( $methodName = $map.get(${field.fullType}) )
#end
${methodName}#end
##--------------------------------------------------------------------------------------------------------
## Data fields = fields not in Primary Key and not in selected Links    
#set( $dataFields = $entity.getAttributesByCriteria( $const.NOT_KEY, $const.NOT_IN_SELECTED_LINKS ) )
##--------------------------------------------------------------------------------------------------------
## Link fields = fields not in Primary Key and used as FK in selected Links    
#set( $linkFields = $entity.getAttributesByCriteria( $const.NOT_KEY, $const.IN_SELECTED_LINKS ) )
##--------------------------------------------------------------------------------------------------------

/*
 * Created on $today.date ( Time $today.time )
 * Generated by $generator.name ( version $generator.version )
 */
package $package;

import java.util.LinkedList;
import java.util.List;
## #foreach( $import in $entity.importsForKeyFields )
#foreach( $import in $java.imports($entity.keyAttributes) )
import $import;
#end

import ${ENTITY_PKG}.jpa.${entity.name}Entity;
import ${package}.tool.MockValues;

public class ${entity.name}EntityMock {

	private MockValues mockValues = new MockValues();
	
	/**
	 * Creates an instance with random Primary Key
	 * @return
	 */
	public ${entity.name}Entity createInstance() {
		// Primary Key values
#*
		return createInstance( 
#foreach( $field in $entity.keyAttributes )
#setMethodName($field )
#if ( $foreach.count > 1 ),#end
			mockValues.$methodName
#end
			)  ;
*#
		return createInstance(#foreach($field in $entity.keyAttributes)#if( $foreach.count > 1 ),#end mockValues.#mockMethod($field)#end );
	}
	
	/**
	 * Creates an instance with a specific Primary Key
	 * @param id1
	 * @return
	 */
	public ${entity.name}Entity createInstance( $fn.argumentsListWithType( $entity.keyAttributes ) ) {
		${entity.name}Entity entity = new ${entity.name}Entity();
		// Init Primary Key fields
#foreach( $field in $entity.keyAttributes )
		entity.${field.setter}( ${field.name}) ;
#end
		// Init Data fields
#foreach( $field in $dataFields )
		entity.${field.setter}( mockValues.#mockMethod($field) ) ; // $field.fullType 
#end
		// Init Link fields (if any)
#foreach( $link in $entity.selectedLinks )
		// ${link.setter}( TODO ) ; // ${link.fieldType} 
#end
		return entity ;
	}
	
	/**
	 * Creates a list of instances
	 * @param count number of instances to be created
	 * @return
	 */
	public List<${entity.name}Entity> createList(int count) {
		List<${entity.name}Entity> list = new LinkedList<${entity.name}Entity>();		
		for ( int i = 1 ; i <= count ; i++ ) {
			list.add( createInstance() );
		}
		return list;
	}
}
