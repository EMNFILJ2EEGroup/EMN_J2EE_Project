/*
 * Created on $today.date ( Time $today.time )
 * Generated by $generator.name ( version $generator.version )
 */
package ${target.javaPackageFromFolder($SRC)};

import java.util.List;
import java.util.Map;
#foreach( $import in $java.imports($entity.keyAttributes) )
import $import;
#end

import ${ENTITY_PKG}.jpa.${entity.name}Entity;
import ${ROOT_PKG}.persistence.commons.fake.GenericFakeService;
import ${ROOT_PKG}.persistence.services.${entity.name}Persistence;

/**
 * Fake persistence service implementation ( entity "${entity.name}" )
 *
 * @author Telosys Tools Generator
 */
public class ${entity.name}PersistenceFAKE extends GenericFakeService<${entity.name}Entity> implements ${entity.name}Persistence {

	public ${entity.name}PersistenceFAKE () {
		super(${entity.name}Entity.class);
	}
	
	protected ${entity.name}Entity buildEntity(int index) {
		${entity.name}Entity entity = new ${entity.name}Entity();
		// Init fields with mock values
#foreach( $field in $entity.getAttributesByCriteria( $const.NOT_IN_SELECTED_LINKS ) )
#set ( $type = $fn.uncapitalize($field.type) )
#if     ( $type == "byte" )
		entity.${field.setter}( nextByte() ) ;
#elseif ( $type == "short" )
		entity.${field.setter}( nextShort() ) ;
#elseif ( $type == "int" || $type == "integer" )
		entity.${field.setter}( nextInteger() ) ;
#elseif ( $type == "long" )
		entity.${field.setter}( nextLong() ) ;
#elseif ( $type == "float" )
		entity.${field.setter}( nextFloat() ) ;
#elseif ( $type == "double" )
		entity.${field.setter}( nextDouble() ) ;
#elseif ( $type == "string" )
		entity.${field.setter}( nextString() ) ;
#elseif ( $type == "bigdecimal" )
		entity.${field.setter}( nextBigDecimal() ) ;
#elseif ( $type == "boolean" )
		entity.${field.setter}( false ) ;
#elseif ( $field.fullType == "java.util.Date" )
		entity.${field.setter}( nextDate() ) ;
#elseif ( $field.fullType == "java.sql.Date" )
		entity.${field.setter}( nextSqlDate() ) ;
#elseif ( $field.fullType == "java.sql.Time" )
		entity.${field.setter}( nextSqlTime() ) ;
#elseif ( $field.fullType == "java.sql.Timestamp" )
		entity.${field.setter}( nextSqlTimestamp() ) ;
#elseif ( $field.fullType == "byte[]" )
		entity.${field.setter}( VOID_BYTES_ARRAY ) ;
#end
#end
		return entity ;
	}
	
	
	public boolean delete(${entity.name}Entity entity) {
		log("delete ( ${entity.name}Entity : " + entity + ")" ) ;
		return true;
	}

##	public boolean delete( #argumentsWithType( $entity.keyAttributes ) ) {
	public boolean delete( $fn.argumentsListWithType( $entity.keyAttributes ) ) {
		log("delete ( PK )") ;
		return true;
	}

	public void insert(${entity.name}Entity entity) {
		log("insert ( ${entity.name}Entity : " + entity + ")" ) ;
	}

##	public ${entity.name}Entity load( #argumentsWithType( $entity.keyAttributes ) ) {
	public ${entity.name}Entity load( $fn.argumentsListWithType( $entity.keyAttributes ) ) {
		log("load ( PK )") ;
		return buildEntity(1) ; 
	}

	public List<${entity.name}Entity> loadAll() {
		log("loadAll()") ;
		return buildList(40) ;
	}

	public List<${entity.name}Entity> loadByNamedQuery(String queryName) {
		log("loadByNamedQuery ( '" + queryName + "' )") ;
		return buildList(20) ;
	}

	public List<${entity.name}Entity> loadByNamedQuery(String queryName, Map<String, Object> queryParameters) {
		log("loadByNamedQuery ( '" + queryName + "', parameters )") ;
		return buildList(10) ;
	}

	public ${entity.name}Entity save(${entity.name}Entity entity) {
		log("insert ( ${entity.name}Entity : " + entity + ")" ) ;
		return entity;
	}

	public List<${entity.name}Entity> search(Map<String, Object> criteria) {
		log("search (criteria)" ) ;
		return buildList(15) ;
	}

	@Override
	public long countAll() {
		return 0 ;
	}

}
