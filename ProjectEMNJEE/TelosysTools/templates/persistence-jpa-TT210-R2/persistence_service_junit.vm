## MAP : key = Java Type, value = MockValues method name 
#set ( $map = { 
  "byte"   : "(byte)0",   "java.lang.Byte"    : "(byte)0",  
  "short"  : "(short)0",  "java.lang.Short"   : "(short)0", 
  "int"    : "0",         "java.lang.Integer" : "0", 
  "long"   : "(long)0",   "java.lang.Long"    : "(long)0", 
  "float"  : "0.0f",      "java.lang.Float"   : "0.0f", 
  "double" : "0.0",       "java.lang.Double"  : "0.0", 
  "java.math.BigDecimal" : "new BigDecimal(0)", 
  "java.lang.String"     : "${QUOT}A${QUOT}",  
  "java.util.Date"       : "new java.util.Date()", 
  "java.sql.Date"        : "new java.sql.Date(0L)", 
  "java.sql.Time"        : "new java.sql.Time(0L)", 
  "java.sql.Timestamp"   : "new java.sql.Timestamp(0L)"
} )
/*
 * Created on $today.date ( Time $today.time )
 * Generated by $generator.name ( version $generator.version )
 */
#set( $entityPersistenceClass = "${entity.name}Persistence" )
#set( $entityMockClass        = "${entity.name}EntityMock" )
## TODO : $template.requiredVariable('ROOT_PKG')
package ${target.javaPackageFromFolder($TEST_SRC)};

#foreach( $import in $java.imports($entity.keyAttributes) )
import $import;
#end

import ${ENTITY_PKG}.jpa.${entity.name}Entity;
import ${ROOT_PKG}.mock.$entityMockClass;
import ${ROOT_PKG}.persistence.PersistenceServiceProvider;
import ${ROOT_PKG}.persistence.services.$entityPersistenceClass;

import org.junit.Assert;
import org.junit.Test;

/**
 * JUnit test case for ${entity.name} persistence service
 * 
 * @author Telosys Tools Generator
 *
 */
public class ${entity.name}PersistenceTest 
{
	@Test
	public void test1() {
		
		System.out.println("Test count ..." );
		
		${entity.name}Persistence service = PersistenceServiceProvider.getService(${entity.name}Persistence.class);
		System.out.println("CountAll = " + service.countAll() );
	}
	
	@Test
	public void test2() {
		
		System.out.println("Test ${entity.name} persistence : delete + load ..." );
		
		${entityPersistenceClass} service = PersistenceServiceProvider.getService(${entityPersistenceClass}.class);
		
		${entityMockClass} mock = new ${entityMockClass}();
		
		// TODO : set primary key values here 
		process( service, mock#foreach( $field in $entity.keyAttributes ), $map.get( ${field.fullType}) #end );
		// process( service, mock, ... );
	}

	private void process($entityPersistenceClass service, $entityMockClass mock, $fn.argumentsListWithType( $entity.keyAttributes ) ) {
		System.out.println("----- "  );
		System.out.println(" . load : " );
		${entity.name}Entity entity = service.load( $fn.argumentsList($entity.keyAttributes) );
		if ( entity != null ) {
			// Found 
			System.out.println("   FOUND : " + entity );
			
			// Save (update) with the same values to avoid database integrity errors  
			System.out.println(" . save : " + entity );
			service.save(entity);
			System.out.println("   saved : " + entity );
		}
		else {
			// Not found 
			System.out.println("   NOT FOUND" );
			// Create a new instance 
			entity = mock.createInstance( $fn.argumentsList($entity.keyAttributes) ) ;
			Assert.assertNotNull(entity);

#set ( $insert = false )
#set ( $n = 0 )
#foreach( $link in $entity.links )
#if ( $link.isCardinalityManyToOne() || $link.isCardinalityOneToOne() )
#if ( $n < 1 )
			// This entity references the following entities : 
#end
			// . $link.targetEntitySimpleType
#set ( $n = $n + 1 )
#end
#end
#if ( $n < 1 ) 
#if ( $entity.nonKeyAttributes.size() == 0 ) 
			/* NB : this entity is a "Join Table" 
			System.out.println(" . insert : " + entity );
			service.insert(entity);
			System.out.println("   inserted : " + entity );
			*/
#else
#set ( $insert = true )
			// No reference : insert is possible 
			// Try to insert the new instance
			System.out.println(" . insert : " + entity );
			service.insert(entity);
			System.out.println("   inserted : " + entity );
#end
#else
			/* Insert only if references are OK
			// Try to insert the new instance
			System.out.println(" . insert : " + entity );
			service.insert(entity);
			System.out.println("   inserted : " + entity );
			*/
#end

			System.out.println(" . delete : " );
			boolean deleted = service.delete( $fn.argumentsList($entity.keyAttributes) );
			System.out.println("   deleted = " + deleted);
#if ( $insert ) 
			Assert.assertTrue(deleted) ;
#end
		}		
	}
}
