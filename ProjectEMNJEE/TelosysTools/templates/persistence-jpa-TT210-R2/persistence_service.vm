/*
 * Created on $today.date ( Time $today.time )
 * Generated by $generator.name ( version $generator.version )
 */
package ${target.javaPackageFromFolder($SRC)};

import java.util.List;
import java.util.Map;
#foreach( $import in $java.imports($entity.keyAttributes) )
import $import;
#end

import ${ENTITY_PKG}.jpa.${entity.name}Entity;

/**
 * Basic persistence operations for entity "${entity.name}"
 * 
#if ( $entity.hasCompositePrimaryKey() )
#set( $primaryKeyType = "${entity.name}EntityKey" )
 * This Bean has a composite Primary Key : $primaryKeyType
#else 
#set( $primaryKeyType = $entity.keyAttributes[0].type )
 * This Bean has a basic Primary Key : $primaryKeyType
#end
 *
 * @author Telosys Tools Generator
 *
 */
public interface ${entity.name}Persistence {

	/**
	 * Deletes the given entity <br>
	 * Transactional operation ( begin transaction and commit )
	 * @param ${fn.uncapitalize($entity.name)}
	 * @return true if found and deleted, false if not found
	 */
	public boolean delete(${entity.name}Entity ${fn.uncapitalize($entity.name)}) ;

	/**
	 * Deletes the entity by its Primary Key <br>
	 * Transactional operation ( begin transaction and commit )
#foreach( $arg in $entity.keyAttributes  )
	 * @param $arg.name
#end	 
	 * @return true if found and deleted, false if not found
	 */
	public boolean delete($fn.argumentsListWithType( $entity.keyAttributes )) ;

	/**
	 * Inserts the given entity and commit <br>
	 * Transactional operation ( begin transaction and commit )
	 * @param ${fn.uncapitalize($entity.name)}
	 */
	public void insert(${entity.name}Entity ${fn.uncapitalize($entity.name)}) ;

	/**
	 * Loads the entity for the given Primary Key <br>
#foreach( $arg in $entity.keyAttributes  )
	 * @param $arg.name
#end	 
	 * @return the entity loaded (or null if not found)
	 */
	public ${entity.name}Entity load($fn.argumentsListWithType( $entity.keyAttributes )) ;

	/**
	 * Loads ALL the entities (use with caution)
	 * @return
	 */
	public List<${entity.name}Entity> loadAll() ;

	/**
	 * Loads a list of entities using the given "named query" without parameter 
	 * @param queryName
	 * @return
	 */
	public List<${entity.name}Entity> loadByNamedQuery(String queryName) ;

	/**
	 * Loads a list of entities using the given "named query" with parameters 
	 * @param queryName
	 * @param queryParameters
	 * @return
	 */
	public List<${entity.name}Entity> loadByNamedQuery(String queryName, Map<String, Object> queryParameters) ;

	/**
	 * Saves (create or update) the given entity <br>
	 * Transactional operation ( begin transaction and commit )
	 * @param ${fn.uncapitalize($entity.name)}
	 * @return
	 */
	public ${entity.name}Entity save(${entity.name}Entity ${fn.uncapitalize($entity.name)}) ;

	/**
	 * Search the entities matching the given search criteria
	 * @param criteria
	 * @return
	 */
	public List<${entity.name}Entity> search( Map<String, Object> criteria ) ;

	/**
	 * Count all the occurrences
	 * @return
	 */
	public long countAll();
	
}
