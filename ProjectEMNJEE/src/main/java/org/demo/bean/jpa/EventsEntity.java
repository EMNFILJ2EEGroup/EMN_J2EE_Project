/*
 * Created on 30 oct. 2014 ( Time 13:59:49 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
// This Bean has a basic Primary Key (not composite) 

package main.java.org.demo.bean.jpa;

import java.io.Serializable;

//import javax.validation.constraints.* ;
//import org.hibernate.validator.constraints.* ;

import java.util.Date;
import java.util.List;

import javax.persistence.*;

/**
 * Persistent class for entity stored in table "EVENTS"
 *
 * @author Telosys Tools Generator
 *
 */

@Entity
@Table(name="EVENTS", schema="APP" )
// Define named queries here
@NamedQueries ( {
	  @NamedQuery ( name="EventsEntity.countAll", query="SELECT COUNT(x) FROM EventsEntity x" ),
	  @NamedQuery ( name="EventsEntity.getAllPublished", query="SELECT e FROM EventsEntity e where e.publication = 1" ),
	  @NamedQuery ( name="EventsEntity.getEventById", query="SELECT e FROM EventsEntity e where e.id = :eventid" ),
	  @NamedQuery ( name="EventsEntity.getAllByUserId", query="SELECT e FROM EventsEntity e where e.organizers.id = :uid")
	} )
public class EventsEntity implements Serializable {

    private static final long serialVersionUID = 1L;

    //----------------------------------------------------------------------
    // ENTITY PRIMARY KEY ( BASED ON A SINGLE FIELD )
    //----------------------------------------------------------------------
    @Id
    @GeneratedValue(strategy=GenerationType.AUTO)
    @Column(name="ID", nullable=false)
    private Integer    id           ;


    //----------------------------------------------------------------------
    // ENTITY DATA FIELDS 
    //----------------------------------------------------------------------    
    @Column(name="NAME", nullable=false, length=100)
    private String     name         ;

    @Column(name="PUBLICATION", nullable=false)
    private Integer    publication  ;

    @Column(name="ADRESSE", length=255)
    private String     adresse      ;

    @Temporal(TemporalType.DATE)
    @Column(name="DATE_DEBUT", nullable=false)
    private Date       dateDebut    ;

    @Temporal(TemporalType.TIME)
    @Column(name="HEURE_DEBUT", nullable=false)
    private Date       heureDebut   ;

    @Temporal(TemporalType.DATE)
    @Column(name="DATE_FIN", nullable=false)
    private Date       dateFin      ;

    @Temporal(TemporalType.TIME)
    @Column(name="HEURE_FIN", nullable=false)
    private Date       heureFin     ;

	// "fkOrganizer" (column "FK_ORGANIZER") is not defined by itself because used as FK in a link 


    //----------------------------------------------------------------------
    // ENTITY LINKS ( RELATIONSHIP )
    //----------------------------------------------------------------------
    @OneToMany(mappedBy="events", targetEntity=ParticipationsEntity.class)
    private List<ParticipationsEntity> listOfParticipations;

    @ManyToOne
    @JoinColumn(name="FK_ORGANIZER", referencedColumnName="ID")
    private OrganizersEntity organizers  ;


    //----------------------------------------------------------------------
    // CONSTRUCTOR(S)
    //----------------------------------------------------------------------
    public EventsEntity() {
		super();
    }
    
    //----------------------------------------------------------------------
    // GETTER & SETTER FOR THE KEY FIELD
    //----------------------------------------------------------------------
    public void setId( Integer id ) {
        this.id = id ;
    }
    public Integer getId() {
        return this.id;
    }

    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR FIELDS
    //----------------------------------------------------------------------
    //--- DATABASE MAPPING : NAME ( VARCHAR ) 
    public void setName( String name ) {
        this.name = name;
    }
    public String getName() {
        return this.name;
    }

    //--- DATABASE MAPPING : PUBLICATION ( INTEGER ) 
    public void setPublication( Integer publication ) {
        this.publication = publication;
    }
    public Integer getPublication() {
        return this.publication;
    }

    //--- DATABASE MAPPING : ADRESSE ( VARCHAR ) 
    public void setAdresse( String adresse ) {
        this.adresse = adresse;
    }
    public String getAdresse() {
        return this.adresse;
    }

    //--- DATABASE MAPPING : DATE_DEBUT ( DATE ) 
    public void setDateDebut( Date dateDebut ) {
        this.dateDebut = dateDebut;
    }
    public Date getDateDebut() {
        return this.dateDebut;
    }

    //--- DATABASE MAPPING : HEURE_DEBUT ( TIME ) 
    public void setHeureDebut( Date heureDebut ) {
        this.heureDebut = heureDebut;
    }
    public Date getHeureDebut() {
        return this.heureDebut;
    }

    //--- DATABASE MAPPING : DATE_FIN ( DATE ) 
    public void setDateFin( Date dateFin ) {
        this.dateFin = dateFin;
    }
    public Date getDateFin() {
        return this.dateFin;
    }

    //--- DATABASE MAPPING : HEURE_FIN ( TIME ) 
    public void setHeureFin( Date heureFin ) {
        this.heureFin = heureFin;
    }
    public Date getHeureFin() {
        return this.heureFin;
    }


    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR LINKS
    //----------------------------------------------------------------------
    public void setListOfParticipations( List<ParticipationsEntity> listOfParticipations ) {
        this.listOfParticipations = listOfParticipations;
    }
    public List<ParticipationsEntity> getListOfParticipations() {
        return this.listOfParticipations;
    }

    public void setOrganizers( OrganizersEntity organizers ) {
        this.organizers = organizers;
    }
    public OrganizersEntity getOrganizers() {
        return this.organizers;
    }


    //----------------------------------------------------------------------
    // toString METHOD
    //----------------------------------------------------------------------
    public String toString() { 
        StringBuffer sb = new StringBuffer(); 
        sb.append("["); 
        sb.append(id);
        sb.append("]:"); 
        sb.append(name);
        sb.append("|");
        sb.append(publication);
        sb.append("|");
        sb.append(adresse);
        sb.append("|");
        sb.append(dateDebut);
        sb.append("|");
        sb.append(heureDebut);
        sb.append("|");
        sb.append(dateFin);
        sb.append("|");
        sb.append(heureFin);
        return sb.toString(); 
    } 

}
